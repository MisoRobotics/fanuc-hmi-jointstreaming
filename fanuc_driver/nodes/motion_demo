#!/usr/bin/env python

import math

from actionlib import SimpleActionClient
from control_msgs.msg import FollowJointTrajectoryAction, \
                             FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectory, \
                                JointTrajectoryPoint
from fanuc_driver.status import FanucStatusMonitor
import rospy


def go_home_trajectory(time=5.):
    status = FanucStatusMonitor()
    traj = JointTrajectory()
    start_point = JointTrajectoryPoint()
    start_point.positions = status.joints
    start_point.time_from_start = rospy.Duration(0.)
    traj.points.append(start_point)
    end_point = JointTrajectoryPoint()
    end_point.positions = [0.,
                           0.,
                           0.,
                           0.,
                           0.,
                           0.]
    end_point.time_from_start = rospy.Duration(time)
    traj.points.append(end_point)
    return traj


def generate_trajectory(length=10., period=2.):
    def get_point(dt):
        point = JointTrajectoryPoint()
        point.positions = [0.5*math.sin(2*math.pi*dt/period),
                           0.,
                           0.,
                           0.,
                           0.,
                           0.]
        point.time_from_start = rospy.Duration(dt)
        return point

    points_per_second = 125.
    traj = JointTrajectory()

    for i in range(int(length*points_per_second)):
        traj.points.append(get_point(i/points_per_second))
    return traj


def make_goal(joint_trajectory):
    goal = FollowJointTrajectoryGoal()
    joint_trajectory.header.stamp = rospy.Time.now()
    goal.trajectory = joint_trajectory
    return goal


def main():
    rospy.init_node('motion_demo')
    rospy.loginfo('Starting %s', rospy.get_name())
    try:
        client = SimpleActionClient(
            '/fanuc_driver_node/follow_joint_trajectory',
            FollowJointTrajectoryAction)
        client.wait_for_server()
        goal = make_goal(go_home_trajectory())
        rospy.loginfo('Sending robot to home position %s', str(goal))
        client.send_goal(goal)
        client.wait_for_result()
        goal = make_goal(generate_trajectory(period=2))
        rospy.loginfo('Sending robot through J1 oscillations %s', str(goal))
        client.send_goal(goal)
        client.wait_for_result()
    except:
        if not rospy.is_shutdown():
            raise


if __name__ == '__main__':
    main()
